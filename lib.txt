lib/
├── app.dart
├── firebase_options.dart
├── main.dart
├── models/
│   ├── car.dart
│   ├── coupon.dart
│   ├── discount.dart
│   ├── product.dart
│   ├── sale.dart
│   └── user.dart
├── routes.dart
├── services/
│   ├── auth_service.dart
│   ├── barcode_service.dart
│   ├── firestore_service.dart
│   └── pdf_service.dart
├── viewmodels/
│   ├── auth_vm.dart
│   ├── discount_vm.dart
│   ├── sales_vm.dart
│   └── stock_vm.dart
├── views/
│   ├── admin/
│   │   ├── admin_home_screen.dart
│   │   ├── car_management.dart
│   │   ├── product_management.dart
│   │   ├── reports_screen.dart
│   │   ├── stock_management.dart
│   │   └── users_screen.dart
│   ├── agent/
│   │   ├── agent_home_screen.dart
│   │   ├── history_screen.dart
│   │   ├── sales_screen.dart
│   │   └── stock_screen.dart
│   ├── login_screen.dart
│   └── signup_screen.dart
└── widgets/
    ├── discount_badge.dart
    ├── payment_section.dart
    ├── product_details_card.dart
    ├── role_based_ui.dart
    └── sale_item.dart

app.dart:

# app.dart
import 'package:flutter/material.dart';
import 'package:salesgo/views/admin/admin_home_screen.dart';
import 'package:salesgo/views/admin/users_screen.dart';
import 'package:salesgo/views/agent/agent_home_screen.dart';
import 'package:salesgo/views/agent/history_screen.dart';
import 'package:salesgo/views/agent/stock_screen.dart';
import 'package:salesgo/views/login_screen.dart';
import 'widgets/role_based_ui.dart';

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ventes Porte-à-Porte',
      theme: ThemeData(primarySwatch: Colors.blue),
      initialRoute: '/',
      routes: {
        '/': (context) => const RoleBasedUI(),
        '/login': (context) => const LoginScreen(),
        '/history': (context) => const HistoryScreen(),
        '/stock': (context) => const StockScreen(),
        '/users': (context) => const UsersScreen(),
        '/admin': (context) => const AdminHomeScreen(),
        '/agent': (context) => const AgentHomeScreen(),
      },
    );
  }
}

firebase_options.dart:

# firebase_options.dart
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCtAgAUfyI9tQX9XXCSPRTerqQsBh1LbXk',
    appId: '1:841065984080:web:74416838864f3d38836155',
    messagingSenderId: '841065984080',
    projectId: 'salesgo-49e56',
    authDomain: 'salesgo-49e56.firebaseapp.com',
    storageBucket: 'salesgo-49e56.firebasestorage.app',
    measurementId: 'G-VZ6MHV30BT',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyB0FuETZfLqhEF9Tglmo2DqOYoefa6UyjI',
    appId: '1:841065984080:android:e356f68a50456f32836155',
    messagingSenderId: '841065984080',
    projectId: 'salesgo-49e56',
    storageBucket: 'salesgo-49e56.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDZLay0tHq0wLc0rAJ_z0KGA_9aW8fpv8U',
    appId: '1:841065984080:ios:2b7a1fa1b210daba836155',
    messagingSenderId: '841065984080',
    projectId: 'salesgo-49e56',
    storageBucket: 'salesgo-49e56.firebasestorage.app',
    iosBundleId: 'net.icloudsolutions.salesgo',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyDZLay0tHq0wLc0rAJ_z0KGA_9aW8fpv8U',
    appId: '1:841065984080:ios:2b7a1fa1b210daba836155',
    messagingSenderId: '841065984080',
    projectId: 'salesgo-49e56',
    storageBucket: 'salesgo-49e56.firebasestorage.app',
    iosBundleId: 'net.icloudsolutions.salesgo',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyCtAgAUfyI9tQX9XXCSPRTerqQsBh1LbXk',
    appId: '1:841065984080:web:d629584b20a21e2c836155',
    messagingSenderId: '841065984080',
    projectId: 'salesgo-49e56',
    authDomain: 'salesgo-49e56.firebaseapp.com',
    storageBucket: 'salesgo-49e56.firebasestorage.app',
    measurementId: 'G-ESP4M4W4W9',
  );
}


main.dart:

# main.dart
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:salesgo/firebase_options.dart';
import 'package:salesgo/viewmodels/discount_vm.dart';
import 'package:salesgo/viewmodels/sales_vm.dart';
import 'package:salesgo/viewmodels/stock_vm.dart';
import 'package:salesgo/views/admin/admin_home_screen.dart';
import 'package:salesgo/views/admin/users_screen.dart';
import 'package:salesgo/views/agent/agent_home_screen.dart';
import 'package:salesgo/views/agent/history_screen.dart';
import 'package:salesgo/views/agent/stock_screen.dart';
import 'package:salesgo/views/signup_screen.dart';
import 'package:salesgo/widgets/role_based_ui.dart';
import 'viewmodels/auth_vm.dart';
import 'services/auth_service.dart';
import 'services/firestore_service.dart';
import 'views/login_screen.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    if (Firebase.apps.isEmpty) {
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
    }
  } catch (e) {
    print('Firebase initialization error: $e');
  }
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthViewModel(authService: FirebaseAuthService())),
        Provider(create: (_) => FirestoreService()),
        ChangeNotifierProvider(create: (context) => SalesViewModel(
          firestoreService: context.read<FirestoreService>(),
        )),
        ChangeNotifierProvider(create: (context) => StockViewModel(
          firestoreService: context.read<FirestoreService>(),
        )),
        ChangeNotifierProvider(create: (context) => DiscountViewModel(
          firestoreService: context.read<FirestoreService>(),
        )),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<AuthViewModel>(
      builder: (context, authVM, _) {
        return MaterialApp(
          title: 'Ventes Porte-à-Porte',
          theme: ThemeData(primarySwatch: Colors.blue),
          // Remove initialRoute and home, handle everything through routes
          routes: {
            '/': (context) => _buildInitialScreen(authVM),
            '/login': (context) => const LoginScreen(),
            '/signup': (context) => const SignupScreen(),
            '/history': (context) => const HistoryScreen(),
            '/stock': (context) => const StockScreen(),
            '/users': (context) => const UsersScreen(),
            '/admin': (context) => const AdminHomeScreen(),
            '/agent': (context) => const AgentHomeScreen(),
          },
        );
      },
    );
  }

  Widget _buildInitialScreen(AuthViewModel authVM) {
    if (authVM.isLoading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    return authVM.currentUser == null 
        ? const LoginScreen()
        : const RoleBasedUI();
  }
}

routes.dart:

# routes.dart
import 'package:salesgo/views/admin/reports_screen.dart';

import 'views/admin/admin_home_screen.dart';
import 'views/agent/agent_home_screen.dart';
import 'views/agent/history_screen.dart';
import 'views/agent/stock_screen.dart';
import 'views/admin/users_screen.dart';

final appRoutes = {
  '/history': (context) => const HistoryScreen(),
  '/stock': (context) => const StockScreen(),
  '/users': (context) => const UsersScreen(),
  '/admin': (context) => const AdminHomeScreen(),
  '/agent': (context) => const AgentHomeScreen(),
  '/reports': (context) => const ReportsScreen(),

};

models\car.dart:

# models\car.dart
class Car {
  final String id;
  final String name;
  final String plateNumber;
  final String? assignedAgentId;

  Car({
    required this.id,
    required this.name,
    required this.plateNumber,
    this.assignedAgentId,
  });

  factory Car.fromFirestore(Map<String, dynamic> data) {
    return Car(
      id: data['id'],
      name: data['name'],
      plateNumber: data['plateNumber'],
      assignedAgentId: data['assignedAgentId'],
    );
  }

  Map<String, dynamic> toMap() => {
    'id': id,
    'name': name,
    'plateNumber': plateNumber,
    'assignedAgentId': assignedAgentId,
  };
}

models\coupon.dart:

# models\coupon.dart
class Coupon {
  final String id;
  final String code;
  final double value;
  final DateTime expiration;
  final bool isUsed;

  Coupon({
    required this.id,
    required this.code,
    required this.value,
    required this.expiration,
    required this.isUsed,
  });

  factory Coupon.fromFirestore(Map<String, dynamic> data) {
    return Coupon(
      id: data['id'],
      code: data['code'],
      value: data['value'].toDouble(),
      expiration: data['expiration'].toDate(),
      isUsed: data['isUsed'],
    );
  }
}

models\discount.dart:

# models\discount.dart
class Discount {
  final String id;
  final String category;
  final DateTime startDate;
  final DateTime endDate;
  final double value;
  final String type;

  Discount({
    required this.id,
    required this.category,
    required this.startDate,
    required this.endDate,
    required this.value,
    required this.type,
  });

  factory Discount.fromFirestore(Map<String, dynamic> data) {
    return Discount(
      id: data['id'],
      category: data['category'],
      startDate: data['startDate'].toDate(),
      endDate: data['endDate'].toDate(),
      value: data['value'].toDouble(),
      type: data['type'],
    );
  }
}

models\product.dart:

# models\product.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Product {
  final String id;
  final String name;
  final double price;
  final String category;
  final String barcode;
  final String? imageUrl;

  Product({
    required this.id,
    required this.name,
    required this.price,
    required this.category,
    required this.barcode,
    this.imageUrl,
  });

  factory Product.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>? ?? {};
    return Product(
      id: doc.id,
      name: data['name'] as String? ?? '',
      price: (data['price'] as num?)?.toDouble() ?? 0.0,
      category: data['category'] as String? ?? '',
      barcode: data['barcode'] as String? ?? '',
      imageUrl: data['imageUrl'] as String?,
    );
  }

  factory Product.fromMap(Map<String, dynamic> map) {
    return Product(
      id: map['id'] as String? ?? '',
      name: map['name'] as String? ?? '',
      price: (map['price'] as num?)?.toDouble() ?? 0.0,
      category: map['category'] as String? ?? '',
      barcode: map['barcode'] as String? ?? '',
      imageUrl: map['imageUrl'] as String?,
    );
  }
  
  Map<String, dynamic> toMap() => {
    'id': id,
    'name': name,
    'price': price,
    'category': category,
    'barcode': barcode,
    'imageUrl': imageUrl, 
  };
}

models\sale.dart:

# models\sale.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:salesgo/models/product.dart';

class Sale {
  final String id;
  final String agentId;
  final DateTime date;
  final List<Product> products;
  final double totalAmount;
  final String paymentMethod;
  final String? couponCode;

  Sale({
    required this.id,
    required this.agentId,
    required this.date,
    required this.products,
    required this.totalAmount,
    required this.paymentMethod,
    this.couponCode,
  });

  // Convert Sale object to Map for Firestore
  Map<String, dynamic> toMap() => {
    'id': id,
    'agentId': agentId,
    'date': date,
    'products': products.map((p) => p.toMap()).toList(),
    'totalAmount': totalAmount,
    'paymentMethod': paymentMethod,
    'couponCode': couponCode,
  };

  // Create Sale object from Firestore document
  factory Sale.fromFirestore(DocumentSnapshot<Map<String, dynamic>> doc) {
    final data = doc.data() ?? {};
    return Sale(
      id: doc.id,
      agentId: data['agentId'] as String? ?? '',
      date: (data['date'] as Timestamp?)?.toDate() ?? DateTime.now(),
      products: (data['products'] as List?)?.map((p) => 
        Product.fromMap(p as Map<String, dynamic>)).toList() ?? [],
      totalAmount: (data['totalAmount'] as num?)?.toDouble() ?? 0.0,
      paymentMethod: data['paymentMethod'] as String? ?? '',
      couponCode: data['couponCode'] as String?,
    );
  }

  static List<Product> _parseProducts(dynamic productsData) {
    if (productsData is! List) return [];
    return productsData.map((p) => Product.fromMap(p as Map<String, dynamic>)).toList();
  }

}

models\user.dart:

# models\user.dart
class AppUser {
  final String uid;
  final String email;
  final String role;
  final String? assignedCarId;

  AppUser({
    required this.uid,
    required this.email,
    required this.role,
    this.assignedCarId, required String name,
  });

  factory AppUser.fromFirestore(Map<String, dynamic> data) {
    return AppUser(
      uid: data['uid'] ?? '',
      name: data['name'] ?? 'Utilisateur inconnu',
      email: data['email'] ?? '',
      role: data['role'] ?? 'agent',
      assignedCarId: data['assignedCarId'],
    );
  }
}

services\auth_service.dart:

# services\auth_service.dart
import 'package:cloud_firestore/cloud_firestore.dart' show FieldValue, FirebaseFirestore;
import 'package:firebase_auth/firebase_auth.dart';

abstract class AuthService {
  Future<User?> signIn(String email, String password);
  Future<User?> signUp(String email, String password, String name, String role);
  Future<void> signOut();
  Stream<User?> get authStateChanges;
}

class FirebaseAuthService implements AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  @override
  Future<User?> signIn(String email, String password) async {
    try {
      // Corrected: Store the UserCredential properly
      final UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      // Return the User object from UserCredential
      return userCredential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthError(e);
    } catch (e) {
      throw Exception('Login error: $e');
    }
  }

  String _handleAuthError(FirebaseAuthException e) {
    switch (e.code) {
      case 'user-not-found':
        return 'No user found with this email.';
      case 'wrong-password':
        return 'Incorrect password.';
      case 'invalid-email':
        return 'Invalid email format.';
      default:
        return 'Login failed: ${e.message}';
    }
  }

    @override
  Future<User?> signUp(String email, String password,String name, String role) async {
    try {
      final UserCredential userCredential = 
          await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      
      // Create user document in Firestore
      await _createUserDocument(userCredential.user!);
      
      return userCredential.user;
    } on FirebaseAuthException catch (e) {
      throw _handleAuthError(e);
    }
  }

  Future<void> _createUserDocument(User user) async {
    await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .set({
          'uid': user.uid,
          'email': user.email,
          'role': 'agent', // Default role
          'createdAt': FieldValue.serverTimestamp(),
        });
  }

  @override
  Future<void> signOut() => _auth.signOut();

  @override
  Stream<User?> get authStateChanges => _auth.authStateChanges();

Future<void> resetPassword(String email) async {
  await _auth.sendPasswordResetEmail(email: email);
}


}

services\barcode_service.dart:

# services\barcode_service.dart
import 'dart:async';

import 'package:mobile_scanner/mobile_scanner.dart';

class BarcodeService {
  Future<String?> scanBarcode() async {
    final completer = Completer<String?>();
    final controller = MobileScannerController();

    controller.barcodes.listen((barcode) {
      if (barcode.barcodes.isNotEmpty) {
        completer.complete(barcode.barcodes.first.rawValue);
        controller.stop();
      }
    });

    await controller.start();
    final result = await completer.future;
    controller.dispose();
    return result;
  }
}

services\firestore_service.dart:

# services\firestore_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/product.dart';
import '../models/sale.dart';

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Produits
  Future<Product?> getProductByBarcode(String barcode) async {
    final snapshot = await FirebaseFirestore.instance
        .collection('products')
        .where('barcode', isEqualTo: barcode)
        .limit(1)
        .get();

    return snapshot.docs.isEmpty 
        ? null 
        : Product.fromFirestore(snapshot.docs.first);
  }

  // Ventes
  Future<void> recordSale(Sale sale) async {
    await _firestore.collection('sales').add(sale.toMap());
  }

  // Stocks
  Stream<Map<String, int>> getCarStock(String carId) {
    return _firestore.collection('cars/$carId/stock')
      .snapshots()
      .map((snapshot) => {
        for (var doc in snapshot.docs)
          doc.id: doc.data()['quantity'] as int
      });
  }

  Future<QuerySnapshot<Map<String, dynamic>>> getActiveDiscounts(DateTime now) async {
    return await _firestore.collection('discounts')
        .where('startDate', isLessThanOrEqualTo: now)
        .where('endDate', isGreaterThanOrEqualTo: now)
        .get();
  }

  Future<List<Sale>> getAgentSales(String agentId) async {
    final snapshot = await _firestore.collection('sales')
      .where('agentId', isEqualTo: agentId)
      .withConverter<Sale>(
        fromFirestore: (doc, _) => Sale.fromFirestore(doc),
        toFirestore: (sale, _) => sale.toMap(),
      )
      .get();
      
    return snapshot.docs.map((doc) => doc.data()).toList();
  }
  
  Future<List<Sale>> getSalesForAgent(String agentId) async {
    try {
      final QuerySnapshot<Map<String, dynamic>> snapshot = await FirebaseFirestore.instance
          .collection('sales')
          .where('agentId', isEqualTo: agentId)
          .get();

      return snapshot.docs.map((doc) => Sale.fromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching sales: $e');
      return []; // Return empty list on error
    }
  }

}



services\pdf_service.dart:

# services\pdf_service.dart
import 'package:pdf/widgets.dart' as pw;
import 'package:salesgo/models/sale.dart';

class PdfService {
  pw.Document generateInvoice(Sale sale) {
    final pdf = pw.Document();
    
    pdf.addPage(
      pw.Page(
        build: (context) => pw.Column(
          children: [
            pw.Header(text: 'Facture #${sale.id}'),
            pw.ListView.builder(
              itemCount: sale.products.length,
              itemBuilder: (context, index) => pw.Text(
                sale.products[index].name,
              ),
            ),
          ],
        ),
      ),
    );
    
    return pdf;
  }
}

viewmodels\auth_vm.dart:

# viewmodels\auth_vm.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../services/auth_service.dart';
import '../models/user.dart';

class AuthViewModel with ChangeNotifier {
  final AuthService authService;
  bool _isLoading = false;
  AppUser? _currentUser;
  String? _userRole;
  String? _errorMessage;

  AuthViewModel({required this.authService});

  AppUser? get currentUser => _currentUser;
  String? get userRole => _userRole;
  String? get errorMessage => _errorMessage;

  bool get isLoading => _isLoading;

  Future<void> signIn(String email, String password) async {
    try {
      _isLoading = true;
      notifyListeners();
      
      final user = await authService.signIn(email, password);
      if (user != null) {
        final userDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();
        
        if (!userDoc.exists) throw Exception('User document not found');
        if (userDoc.data() == null) {throw Exception("Les données utilisateur sont nulles !");}
        _currentUser = AppUser.fromFirestore(userDoc.data()!);
        _userRole = userDoc.data()!['role'];
      }
    } catch (e) {
      _errorMessage = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }


  Future<void> signOut() async {
    await authService.signOut();
    _currentUser = null;
    _userRole = null;
    notifyListeners();
  }

  Stream<AppUser?> get authStateChanges => authService.authStateChanges
      .asyncMap((user) => user != null ? _getUserData(user.uid) : null);

  Future<AppUser?> _getUserData(String uid) async {
    final doc = await FirebaseFirestore.instance.collection('users').doc(uid).get();
    return doc.exists ? AppUser.fromFirestore(doc.data()!) : null;
  }

  Future<void> signUp(
    String email, 
    String password,
    String name,
    String role,
  ) async {
    try {
      final user = await authService.signUp(email, password, name, role);
      if (user != null) {
        _currentUser = AppUser(
          uid: user.uid,
          email: user.email ?? '',
          name: name,
          role: role,
        );
        _userRole = role;
      }
    } catch (e) {
      _errorMessage = e.toString();
    }
    notifyListeners();
  }
  
}

viewmodels\discount_vm.dart:

# viewmodels\discount_vm.dart
import 'package:flutter/material.dart';
import '../services/firestore_service.dart';
import '../models/discount.dart';

class DiscountViewModel with ChangeNotifier {
  final FirestoreService _firestoreService;
  List<Discount> _activeDiscounts = [];

  DiscountViewModel({required FirestoreService firestoreService})
      : _firestoreService = firestoreService;

  List<Discount> get activeDiscounts => _activeDiscounts;

  Future<void> loadActiveDiscounts() async {
    final now = DateTime.now();
    final snapshot = await _firestoreService.getActiveDiscounts(now);
    _activeDiscounts = snapshot.docs
      .map((doc) => Discount.fromFirestore(doc.data()))
      .toList();
    notifyListeners();
  }
}

viewmodels\sales_vm.dart:

# viewmodels\sales_vm.dart
import 'package:flutter/material.dart';
import 'package:salesgo/models/product.dart';
import 'package:salesgo/models/sale.dart';
import 'package:salesgo/services/firestore_service.dart';
import 'package:uuid/uuid.dart';

class SalesViewModel with ChangeNotifier {
  final List<Product> _cartItems = [];
  final FirestoreService _firestoreService;

  SalesViewModel({required FirestoreService firestoreService})
      : _firestoreService = firestoreService;

  List<Product> get cartItems => _cartItems;

  double get totalAmount {
    return _cartItems.fold(0, (sum, item) => sum + item.price);
  }

  void addToCart(Product product) {
    _cartItems.add(product);
    notifyListeners();
  }

  void removeFromCart(int index) {
    if (index >= 0 && index < _cartItems.length) {
      _cartItems.removeAt(index);
      notifyListeners();
    }
  }
  
  Future<void> confirmSale({
    required String paymentMethod,
    String? couponCode,
  }) async {
    final sale = Sale(
      id: Uuid().v4(),
      agentId: 'current_user_id', // Get from auth
      date: DateTime.now(),
      products: _cartItems,
      totalAmount: _calculateTotal(),
      paymentMethod: paymentMethod,
    );

    await _firestoreService.recordSale(sale);
    _cartItems.clear();
    notifyListeners();
  }

  double _calculateTotal() {
    return _cartItems.fold(0, (sum, item) => sum + item.price);
  }
}

viewmodels\stock_vm.dart:

# viewmodels\stock_vm.dart
import 'package:flutter/material.dart';
import '../services/firestore_service.dart';

class StockViewModel with ChangeNotifier {
  final FirestoreService _firestoreService;
  Map<String, int> _stock = {};

  StockViewModel({required FirestoreService firestoreService})
      : _firestoreService = firestoreService;

  Map<String, int> get stock => _stock;

  void loadStock(String carId) {
    _firestoreService.getCarStock(carId).listen((stockData) {
      _stock = stockData;
      notifyListeners();
    });
  }
}

views\login_screen.dart:

# views\login_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../viewmodels/auth_vm.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final authVM = Provider.of<AuthViewModel>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'Email'),
                keyboardType: TextInputType.emailAddress,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your email';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter your password';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    try {
                      await authVM.signIn(_emailController.text, _passwordController.text);
                    } catch (e) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Login failed: $e')),
                      );
                    }
                  }
                },
                child: const Text('Login'),
              ),
              // Add this new section for signup
              const SizedBox(height: 16),
              TextButton(
                onPressed: () {
                  Navigator.pushNamed(context, '/signup');
                },
                style: TextButton.styleFrom(
                  foregroundColor: Theme.of(context).primaryColor,
                ),
                child: const Text("Don't have an account? Sign up"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

views\signup_screen.dart:

# views\signup_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../viewmodels/auth_vm.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  _SignupScreenState createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  String _selectedRole = 'agent';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Create Account')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'Full Name'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'Email'),
                validator: (value) => 
                    value!.isEmpty ? 'Required' : 
                    !value.contains('@') ? 'Invalid email' : null,
              ),
              TextFormField(
                controller: _passwordController,
                decoration: const InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) => value!.length < 6 
                    ? 'Minimum 6 characters' 
                    : null,
              ),
              DropdownButtonFormField<String>(
                value: _selectedRole,
                items: const [
                  DropdownMenuItem(value: 'agent', child: Text('Agent')),
                  DropdownMenuItem(value: 'admin', child: Text('Admin')),
                ],
                onChanged: (value) => setState(() => _selectedRole = value!),
                decoration: const InputDecoration(labelText: 'Role'),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _signUp,
                child: const Text('Sign Up'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _signUp() async {
    if (_formKey.currentState!.validate()) {
      try {
        final authVM = Provider.of<AuthViewModel>(context, listen: false);
        await authVM.signUp(
          _emailController.text,
          _passwordController.text,
          _nameController.text,
          _selectedRole,
        );
        
        if (authVM.currentUser != null) {
          Navigator.pushReplacementNamed(context, '/');
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Signup failed: ${e.toString()}')),
        );
      }
    }
  }
}

views\admin\admin_home_screen.dart:

# views\admin\admin_home_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:salesgo/views/admin/car_management.dart';
import 'package:salesgo/views/admin/product_management.dart';
import 'users_screen.dart';
import 'stock_management.dart';
import 'reports_screen.dart';
import '../../viewmodels/auth_vm.dart';

class AdminHomeScreen extends StatefulWidget {
  const AdminHomeScreen({super.key});

  @override
  State<AdminHomeScreen> createState() => _AdminHomeScreenState();
}

class _AdminHomeScreenState extends State<AdminHomeScreen> {
  int _selectedIndex = 0;

  static const List<Widget> _adminScreens = [
    UsersScreen(),
    ProductManagement(),
    CarManagement(),
    StockManagement(),
    ReportsScreen(),
  ];

  void _onItemTapped(int index) {
    setState(() => _selectedIndex = index);
  }

  void _logout(BuildContext context) async {
    final authVM = Provider.of<AuthViewModel>(context, listen: false);
    await authVM.signOut();
    Navigator.pushReplacementNamed(context, '/');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tableau de bord Admin'),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () => _logout(context),
          ),
        ],
      ),
      body: _adminScreens.elementAt(_selectedIndex),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        type: BottomNavigationBarType.fixed, // Important for more than 3 items
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.people),
            label: 'Agents',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.shopping_bag),
            label: 'Produits',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.directions_car),
            label: 'Véhicules',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.inventory),
            label: 'Stock',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.analytics),
            label: 'Rapports',
          ),
        ],
        selectedItemColor: Colors.blue, // Customize as needed
        unselectedItemColor: Colors.grey, // Customize as needed
      ),
    );
  }
}

views\admin\car_management.dart:

# views\admin\car_management.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:salesgo/models/car.dart';
import 'package:salesgo/models/user.dart';

class CarManagement extends StatefulWidget {
  const CarManagement({super.key});

  @override
  _CarManagementState createState() => _CarManagementState();
}

class _CarManagementState extends State<CarManagement> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _plateController = TextEditingController();
  String? _selectedAgentId;

  Future<void> _addCar() async {
    if (_formKey.currentState!.validate()) {
      try {
        final car = Car(
          id: FirebaseFirestore.instance.collection('cars').doc().id,
          name: _nameController.text,
          plateNumber: _plateController.text,
          assignedAgentId: _selectedAgentId,
        );

        await FirebaseFirestore.instance
            .collection('cars')
            .doc(car.id)
            .set(car.toMap());

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Car added successfully')),
        );

        // Clear form
        _formKey.currentState!.reset();
        setState(() => _selectedAgentId = null);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding car: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Car Management')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'Car Name'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _plateController,
                decoration: const InputDecoration(labelText: 'Plate Number'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              const SizedBox(height: 20),
              const Text('Assign to Agent (optional)'),
              StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('users')
                    .where('role', isEqualTo: 'agent')
                    .snapshots(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const CircularProgressIndicator();
                  }
                  final agents = snapshot.data!.docs
                      .map((doc) => AppUser.fromFirestore(doc.data() as Map<String, dynamic>))
                      .toList();
                  
                  return DropdownButton<String>(
                    value: _selectedAgentId,
                    hint: const Text('Select Agent'),
                    items: agents.map((agent) {
                      return DropdownMenuItem<String>(
                        value: agent.uid,
                        child: Text(agent.email),
                      );
                    }).toList(),
                    onChanged: (value) => setState(() => _selectedAgentId = value),
                  );
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _addCar,
                child: const Text('Add Car'),
              ),
              const SizedBox(height: 20),
              const Divider(),
              const Text('Existing Cars', style: TextStyle(fontSize: 18)),
              const SizedBox(height: 10),
              StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance.collection('cars').snapshots(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const CircularProgressIndicator();
                  }
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: snapshot.data!.docs.length,
                    itemBuilder: (context, index) {
                      final doc = snapshot.data!.docs[index];
                      final car = Car.fromFirestore(doc.data() as Map<String, dynamic>);
                      return ListTile(
                        title: Text(car.name),
                        subtitle: Text('Plate: ${car.plateNumber}'),
                        trailing: IconButton(
                          icon: const Icon(Icons.delete),
                          onPressed: () => _deleteCar(doc.id),
                        ),
                      );
                    },
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _deleteCar(String carId) async {
    try {
      await FirebaseFirestore.instance.collection('cars').doc(carId).delete();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Car deleted')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting car: $e')),
      );
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _plateController.dispose();
    super.dispose();
  }
}

views\admin\product_management.dart:

# views\admin\product_management.dart
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:salesgo/models/product.dart';

class ProductManagement extends StatefulWidget {
  const ProductManagement({super.key});

  @override
  _ProductManagementState createState() => _ProductManagementState();
}

class _ProductManagementState extends State<ProductManagement> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _priceController = TextEditingController();
  final _categoryController = TextEditingController();
  final _barcodeController = TextEditingController();
  String? _imageUrl;
  bool _isLoading = false;

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() => _isLoading = true);
      try {
        final ref = FirebaseStorage.instance
            .ref()
            .child('product_images/${DateTime.now().millisecondsSinceEpoch}');
        
        await ref.putFile(File(pickedFile.path));
        _imageUrl = await ref.getDownloadURL();
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to upload image: $e')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _addProduct() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      try {
        final product = Product(
          id: FirebaseFirestore.instance.collection('products').doc().id,
          name: _nameController.text,
          price: double.parse(_priceController.text),
          category: _categoryController.text,
          barcode: _barcodeController.text,
          imageUrl: _imageUrl,
        );

        await FirebaseFirestore.instance
            .collection('products')
            .doc(product.id)
            .set(product.toMap());

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Product added successfully')),
        );

        // Clear form
        _formKey.currentState!.reset();
        setState(() => _imageUrl = null);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding product: $e')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Product Management')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'Product Name'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _priceController,
                decoration: const InputDecoration(labelText: 'Price'),
                keyboardType: TextInputType.number,
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _categoryController,
                decoration: const InputDecoration(labelText: 'Category'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              TextFormField(
                controller: _barcodeController,
                decoration: const InputDecoration(labelText: 'Barcode'),
                validator: (value) => value!.isEmpty ? 'Required' : null,
              ),
              const SizedBox(height: 20),
              _imageUrl != null
                  ? Image.network(_imageUrl!, height: 150)
                  : Container(),
              ElevatedButton(
                onPressed: _pickImage,
                child: const Text('Upload Image'),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _isLoading ? null : _addProduct,
                child: _isLoading
                    ? const CircularProgressIndicator()
                    : const Text('Add Product'),
              ),
              const SizedBox(height: 20),
              const Divider(),
              const Text('Existing Products', style: TextStyle(fontSize: 18)),
              const SizedBox(height: 10),
              StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('products')
                    .snapshots(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const CircularProgressIndicator();
                  }
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: snapshot.data!.docs.length,
                    itemBuilder: (context, index) {
                      final doc = snapshot.data!.docs[index];
                      return ListTile(
                        title: Text(doc['name']),
                        subtitle: Text('€${doc['price']} - ${doc['category']}'),
                        trailing: IconButton(
                          icon: const Icon(Icons.delete),
                          onPressed: () => _deleteProduct(doc.id),
                        ),
                      );
                    },
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _deleteProduct(String productId) async {
    try {
      await FirebaseFirestore.instance
          .collection('products')
          .doc(productId)
          .delete();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Product deleted')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting product: $e')),
      );
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _priceController.dispose();
    _categoryController.dispose();
    _barcodeController.dispose();
    super.dispose();
  }
}

views\admin\reports_screen.dart:

# views\admin\reports_screen.dart
import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ReportsScreen extends StatelessWidget {
  const ReportsScreen({super.key});

  Future<List<BarChartGroupData>> _getChartData() async {
    final snapshot = await FirebaseFirestore.instance.collectionGroup('sales').get();

    final data = snapshot.docs.map((doc) => SalesData(
          doc['agentId'],
          doc['totalAmount'].toDouble(),
        )).toList();

    return data.asMap().entries.map((entry) {
      int index = entry.key;
      SalesData sales = entry.value;
      return BarChartGroupData(
        x: index,
        barRods: [BarChartRodData(toY: sales.amount, color: Colors.blue)],
      );
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Rapports'),
        actions: [
          IconButton(
            icon: const Icon(Icons.download),
            onPressed: _exportToExcel,
          ),
        ],
      ),
      body: FutureBuilder<List<BarChartGroupData>>(
        future: _getChartData(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: BarChart(
              BarChartData(
                barGroups: snapshot.data!,
                titlesData: FlTitlesData(
                  leftTitles: AxisTitles(sideTitles: SideTitles(showTitles: true)),
                  bottomTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                ),
                borderData: FlBorderData(show: false),
                barTouchData: BarTouchData(enabled: true),
              ),
            ),
          );
        },
      ),
    );
  }

  void _exportToExcel() {
    // Intégrer l'export XLSX ici
  }
}

class SalesData {
  final String agent;
  final double amount;

  SalesData(this.agent, this.amount);
}


views\admin\stock_management.dart:

# views\admin\stock_management.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class StockManagement extends StatefulWidget {
  const StockManagement({super.key});

  @override
  _StockManagementState createState() => _StockManagementState();
}

class _StockManagementState extends State<StockManagement> {
  String? _selectedCarId;
  final _formKey = GlobalKey<FormState>();
  final _productController = TextEditingController();
  final _quantityController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Gestion des Stocks')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance.collection('cars').snapshots(),
              builder: (context, snapshot) {
                if (!snapshot.hasData) return const CircularProgressIndicator();
                
                return DropdownButton<String>(
                  value: _selectedCarId,
                  hint: const Text('Sélectionner une voiture'),
                  items: snapshot.data!.docs.map((doc) {
                    return DropdownMenuItem<String>(
                      value: doc.id,
                      child: Text(doc.id),
                    );
                  }).toList(),
                  onChanged: (value) => setState(() => _selectedCarId = value),
                );
              },
            ),
            Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    controller: _productController,
                    decoration: const InputDecoration(labelText: 'Produit ID'),
                    validator: (value) => value!.isEmpty ? 'Requis' : null,
                  ),
                  TextFormField(
                    controller: _quantityController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(labelText: 'Quantité'),
                    validator: (value) => value!.isEmpty ? 'Requis' : null,
                  ),
                  ElevatedButton(
                    child: const Text('Assigner Stock'),
                    onPressed: _assignStock,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _assignStock() async {
    if (_selectedCarId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a car')));
      return;
    }
    
    if (_formKey.currentState!.validate()) {
      // Verify product exists
      final productDoc = await FirebaseFirestore.instance
          .collection('products')
          .doc(_productController.text)
          .get();

      if (!productDoc.exists) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Product does not exist')));
        return;
      }

      // Update stock
      await FirebaseFirestore.instance
          .collection('cars/$_selectedCarId/stock')
          .doc(_productController.text)
          .set({'quantity': int.parse(_quantityController.text)});
    }
  }
}

views\admin\users_screen.dart:

# views\admin\users_screen.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import '../../viewmodels/auth_vm.dart';

class UsersScreen extends StatelessWidget {
  const UsersScreen({super.key});

  @override
  Widget build(BuildContext context) {
    Provider.of<AuthViewModel>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('Gestion des Agents')),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.add),
        onPressed: () => _createNewUser(context),
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: FirebaseFirestore.instance
            .collection('users')
            .where('role', isEqualTo: 'agent')
            .snapshots(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return const CircularProgressIndicator();
          
          return ListView.builder(
            itemCount: snapshot.data!.docs.length,
            itemBuilder: (context, index) {
              final user = snapshot.data!.docs[index];
              return ListTile(
                title: Text(user['email']),
                trailing: IconButton(
                  icon: const Icon(Icons.delete),
                  onPressed: () => _deleteUser(user.id),
                ),
              );
            },
          );
        },
      ),
    );
  }

  void _createNewUser(BuildContext context) {
    // Navigation vers l'écran de création d'utilisateur
  }

  void _deleteUser(String userId) async {
    await FirebaseFirestore.instance.collection('users').doc(userId).delete();
  }
}

views\agent\agent_home_screen.dart:

# views\agent\agent_home_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:salesgo/viewmodels/auth_vm.dart';
import 'package:salesgo/viewmodels/discount_vm.dart';
import 'package:salesgo/viewmodels/stock_vm.dart';
import 'sales_screen.dart';
import 'stock_screen.dart';
import 'history_screen.dart';

class AgentHomeScreen extends StatefulWidget {
  const AgentHomeScreen({super.key});

  @override
  State<AgentHomeScreen> createState() => _AgentHomeScreenState();
}

class _AgentHomeScreenState extends State<AgentHomeScreen> {
  int _selectedIndex = 0;

  @override
  void initState() {
    super.initState();
    // Initialize viewmodels when screen loads
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final stockVM = context.read<StockViewModel>();
      final discountVM = context.read<DiscountViewModel>();
      final authVM = context.read<AuthViewModel>();
      
      // Load stock for the assigned car (if any)
      if (authVM.currentUser?.assignedCarId != null) {
        stockVM.loadStock(authVM.currentUser!.assignedCarId!);
      }
      
      // Load active discounts
      discountVM.loadActiveDiscounts();
    });
  }

  static const List<Widget> _agentScreens = [
    SalesScreen(),
    StockScreen(),
    HistoryScreen(),
  ];

  void _onItemTapped(int index) {
    setState(() => _selectedIndex = index);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Tableau de bord Agent')),
      body: _agentScreens.elementAt(_selectedIndex),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.point_of_sale),
            label: 'Ventes',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.inventory_2),
            label: 'Stock',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.history),
            label: 'Historique',
          ),
        ],
      ),
    );
  }
}

views\agent\history_screen.dart:

# views\agent\history_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:salesgo/models/sale.dart';
import '../../viewmodels/auth_vm.dart';
import '../../widgets/sale_item.dart';

class HistoryScreen extends StatefulWidget {
  const HistoryScreen({super.key});

  @override
  State<HistoryScreen> createState() => _HistoryScreenState();
}

class _HistoryScreenState extends State<HistoryScreen> {
  String _selectedFilter = 'week';
  late DateTimeRange _dateRange;

  @override
  void initState() {
    super.initState();
    _updateDateRange();
  }

  void _updateDateRange() {
    final now = DateTime.now();
    switch (_selectedFilter) {
      case 'day':
        _dateRange = DateTimeRange(
          start: DateTime(now.year, now.month, now.day),
          end: now,
        );
        break;
      case 'week':
        _dateRange = DateTimeRange(
          start: now.subtract(const Duration(days: 7)),
          end: now,
        );
        break;
      case 'month':
        _dateRange = DateTimeRange(
          start: DateTime(now.year, now.month, 1),
          end: now,
        );
        break;
      default:
        _dateRange = DateTimeRange(
          start: now.subtract(const Duration(days: 7)),
          end: now,
        );
    }
  }

  @override
  Widget build(BuildContext context) {
    final authVM = Provider.of<AuthViewModel>(context);
    final userId = authVM.currentUser?.uid;

    if (userId == null) {
      return const Center(child: Text('User not authenticated'));
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Historique des Ventes'),
        actions: [
          DropdownButton<String>(
            value: _selectedFilter,
            items: const [
              DropdownMenuItem(value: 'day', child: Text('Today')),
              DropdownMenuItem(value: 'week', child: Text('Current Week')),
              DropdownMenuItem(value: 'month', child: Text('Current Month')),
            ],
            onChanged: (value) {
              if (value != null) {
                setState(() {
                  _selectedFilter = value;
                  _updateDateRange();
                });
              }
            },
          ),
        ],
      ),
      body: StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
        stream: FirebaseFirestore.instance
            .collection('sales')
            .where('agentId', isEqualTo: userId)
            .where('date', isGreaterThanOrEqualTo: _dateRange.start)
            .where('date', isLessThanOrEqualTo: _dateRange.end)
            .orderBy('date', descending: true)
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return const Center(child: Text('Aucune vente trouvée'));
          }

          final sales = snapshot.data!.docs.map((doc) {
            try {
              return Sale.fromFirestore(doc);
            } catch (e) {
              debugPrint('Error parsing sale: $e');
              return null;
            }
          }).whereType<Sale>().toList();

          return ListView.builder(
            itemCount: sales.length,
            itemBuilder: (context, index) => SaleItem(sale: sales[index]),
          );
        },
      ),
    );
  }
}

views\agent\sales_screen.dart:

# views\agent\sales_screen.dart
import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:provider/provider.dart';
import 'package:salesgo/services/firestore_service.dart';
import 'package:salesgo/viewmodels/sales_vm.dart';
import 'package:salesgo/widgets/product_details_card.dart';
import 'package:salesgo/widgets/payment_section.dart';

class SalesScreen extends StatefulWidget {
  const SalesScreen({super.key});

  @override
  State<SalesScreen> createState() => _SalesScreenState();
}

class _SalesScreenState extends State<SalesScreen> {
  final MobileScannerController _scannerController = MobileScannerController();
  final FirestoreService _firestoreService = FirestoreService();
  bool _isScanning = true;

  @override
  void dispose() {
    _scannerController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final salesVM = Provider.of<SalesViewModel>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('New Sale'),
        actions: [
          IconButton(
            icon: Icon(_isScanning ? Icons.scanner : Icons.no_photography),
            onPressed: _toggleScanning,
          ),
        ],
      ),
      body: Column(
        children: [
          if (_isScanning) _buildScannerSection(context, salesVM),
          Expanded(
            child: ListView.builder(
              itemCount: salesVM.cartItems.length,
              itemBuilder: (context, index) => ProductDetailsCard(
                product: salesVM.cartItems[index],
                onRemove: () => salesVM.removeFromCart(index),
              ),
            ),
          ),
          if (salesVM.cartItems.isNotEmpty)
            PaymentSection(
              onConfirm: (method, coupon) => _handleSaleConfirmation(
                context,
                salesVM,
                method,
                coupon,
              ),
              totalAmount: salesVM.totalAmount,
            ),
        ],
      ),
    );
  }

  Widget _buildScannerSection(BuildContext context, SalesViewModel salesVM) {
    return Container(
      height: 200,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey),
        borderRadius: BorderRadius.circular(8),
      ),
      child: MobileScanner(
        controller: _scannerController,
        onDetect: (capture) => _handleBarcodeScan(capture, context, salesVM),
      ),
    );
  }

  void _handleBarcodeScan(
    BarcodeCapture capture,
    BuildContext context,
    SalesViewModel salesVM,
  ) async {
    if (capture.barcodes.isEmpty) return;
    
    final barcode = capture.barcodes.first.rawValue;
    if (barcode == null) return;

    try {
      final product = await _firestoreService.getProductByBarcode(barcode);
      if (product == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Product not found')),
        );
        return;
      }
      salesVM.addToCart(product);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: ${e.toString()}')),
      );
    }
  }

  void _toggleScanning() {
    setState(() => _isScanning = !_isScanning);
    if (_isScanning) {
      _scannerController.start();
    } else {
      _scannerController.stop();
    }
  }

  Future<void> _handleSaleConfirmation(
    BuildContext context,
    SalesViewModel salesVM,
    String paymentMethod,
    String? couponCode,
  ) async {
    try {
      await salesVM.confirmSale(
        paymentMethod: paymentMethod,
        couponCode: couponCode,
      );
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Sale completed successfully!')),
      );
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error completing sale: ${e.toString()}')),
      );
    }
  }
}

views\agent\stock_screen.dart:

# views\agent\stock_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../viewmodels/stock_vm.dart';

class StockScreen extends StatelessWidget {
  const StockScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final stockVM = Provider.of<StockViewModel>(context);
    
    return Scaffold(
      appBar: AppBar(title: const Text('Stock Actuel')),
      body: ListView.builder(
        itemCount: stockVM.stock.keys.length,
        itemBuilder: (context, index) {
          final productId = stockVM.stock.keys.elementAt(index);
          return ListTile(
            title: Text('Produit $productId'),
            subtitle: Text('Quantité: ${stockVM.stock[productId]}'),
          );
        },
      ),
    );
  }
}

widgets\discount_badge.dart:

# widgets\discount_badge.dart
import 'package:flutter/material.dart';
import '../models/discount.dart';

class DiscountBadge extends StatelessWidget {
  final Discount discount;
  
  const DiscountBadge({super.key, required this.discount});

  @override
  Widget build(BuildContext context) {
    return Chip(
      backgroundColor: discount.type == '%' ? Colors.amber[100] : Colors.green[100],
      label: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '${discount.value}${discount.type}',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: discount.type == '%' ? Colors.orange[800] : Colors.green[800],
            ),
          ),
          Text(
            'Valide: ${discount.startDate.day}/${discount.startDate.month} '
            '- ${discount.endDate.day}/${discount.endDate.month}',
            style: const TextStyle(fontSize: 10),
          ),
        ],
      ),
    );
  }
}

widgets\payment_section.dart:

# widgets\payment_section.dart
import 'package:flutter/material.dart';

class PaymentSection extends StatefulWidget {
  final Function(String, String?) onConfirm;
  final double totalAmount;

  const PaymentSection({
    super.key,
    required this.onConfirm,
    required this.totalAmount,
  });

  @override
  State<PaymentSection> createState() => _PaymentSectionState();
}

class _PaymentSectionState extends State<PaymentSection> {
  String? _selectedPaymentMethod;
  final _couponController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  @override
  void dispose() {
    _couponController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Text(
                'Total: €${widget.totalAmount.toStringAsFixed(2)}',
                style: const TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              DropdownButtonFormField<String>(
                decoration: const InputDecoration(
                  labelText: 'Payment Method',
                  border: OutlineInputBorder(),
                ),
                value: _selectedPaymentMethod,
                items: const [
                  DropdownMenuItem(
                    value: 'cash',
                    child: Text('Cash'),
                  ),
                  DropdownMenuItem(
                    value: 'card',
                    child: Text('Credit Card'),
                  ),
                  DropdownMenuItem(
                    value: 'mobile',
                    child: Text('Mobile Payment'),
                  ),
                ],
                validator: (value) =>
                    value == null ? 'Please select payment method' : null,
                onChanged: (value) {
                  setState(() {
                    _selectedPaymentMethod = value;
                  });
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _couponController,
                decoration: const InputDecoration(
                  labelText: 'Coupon Code (optional)',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                ),
                onPressed: _handleConfirmation,
                child: const Text('Confirm Sale'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _handleConfirmation() {
    if (_formKey.currentState!.validate()) {
      widget.onConfirm(
        _selectedPaymentMethod!,
        _couponController.text.isNotEmpty ? _couponController.text : null,
      );
    }
  }
}

widgets\product_details_card.dart:

# widgets\product_details_card.dart
import 'package:flutter/material.dart';
import '../models/product.dart';
import '../models/discount.dart';
import 'discount_badge.dart';
import '../viewmodels/discount_vm.dart';
import 'package:provider/provider.dart';

class ProductDetailsCard extends StatelessWidget {
  final Product product;
  final VoidCallback? onRemove;

  const ProductDetailsCard({
    super.key,
    required this.product,
    this.onRemove,
  });

  double _calculateFinalPrice(double basePrice, List<Discount> discounts) {
    if (discounts.isEmpty) return basePrice;
    
    // Get the highest applicable discount
    final applicableDiscounts = discounts.where((d) => d.category == product.category).toList();
    if (applicableDiscounts.isEmpty) return basePrice;

    final maxDiscount = applicableDiscounts
      .map((d) => d.type == '%' ? basePrice * (d.value / 100) : d.value)
      .reduce((a, b) => a > b ? a : b);

    return basePrice - maxDiscount;
  }

  @override
  Widget build(BuildContext context) {
    final discountVM = Provider.of<DiscountViewModel>(context);

    final finalPrice = _calculateFinalPrice(
      product.price,
      discountVM.activeDiscounts,
    );

    return Card(
      margin: const EdgeInsets.all(12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                // Product Image
                if (product.imageUrl != null)
                  Image.network(
                    product.imageUrl!,
                    width: 80,
                    height: 80,
                    fit: BoxFit.cover,
                  ),
                if (product.imageUrl == null || product.imageUrl!.isEmpty)
                  Container(
                    width: 80,
                    height: 80,
                    color: Colors.grey[200],
                    child: const Icon(Icons.image_not_supported, color: Colors.grey),
                  ),
                const SizedBox(width: 16),
                // Product Info
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        product.name,
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        product.category,
                        style: Theme.of(context).textTheme.bodySmall,
                      ),
                    ],
                  ),
                ),
                // Remove Button (only shown if onRemove callback is provided)
                if (onRemove != null)
                  IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: onRemove,
                  ),
              ],
            ),
            const Divider(),
            // Price Information
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Final Price:',
                  style: Theme.of(context).textTheme.bodyLarge,
                ),
                Text(
                  '€${finalPrice.toStringAsFixed(2)}',
                  style: TextStyle(
                    fontSize: 24,
                    color: Theme.of(context).colorScheme.primary,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            if (finalPrice < product.price)
              Padding(
                padding: const EdgeInsets.only(top: 8),
                child: Text(
                  'Original Price: €${product.price.toStringAsFixed(2)}',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[600],
                    decoration: TextDecoration.lineThrough,
                  ),
                ),
              ),
            const SizedBox(height: 12),
            // Discount Badges
            Wrap(
              spacing: 8,
              children: discountVM.activeDiscounts
                  .where((d) => d.category == product.category)
                  .map((discount) => DiscountBadge(discount: discount))
                  .toList(),
            ),
          ],
        ),
      ),
    );
  }
}

widgets\role_based_ui.dart:

# widgets\role_based_ui.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../viewmodels/auth_vm.dart';
import '../views/admin/admin_home_screen.dart';
import '../views/agent/agent_home_screen.dart';
import '../views/login_screen.dart'; // Import added

class RoleBasedUI extends StatelessWidget {
  const RoleBasedUI({super.key});

  @override
  Widget build(BuildContext context) {
    final authVM = Provider.of<AuthViewModel>(context);

    if (authVM.userRole == 'admin') {
      return const AdminHomeScreen();
    } else if (authVM.userRole == 'agent') {
      return const AgentHomeScreen();
    } else if (authVM.currentUser == null) {
      // User is not logged in, navigate to login
      return const LoginScreen();
    } else {
      // User is logged in, but role is still being fetched
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }
  }
} 

widgets\sale_item.dart:

# widgets\sale_item.dart
import 'package:flutter/material.dart';
import '../models/sale.dart';

class SaleItem extends StatelessWidget {
  final Sale sale;
  
  const SaleItem({super.key, required this.sale});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        title: Text('Vente #${sale.id}'),
        subtitle: Text('Total: ${sale.totalAmount}€'),
        trailing: Text(sale.paymentMethod),
      ),
    );
  }
}
